import heapq
print("192372103-Pavanesh")
class Node:
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position
        self.g = 0  # Distance from start node
        self.h = 0  # Heuristic distance to end node
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):  # Needed for heapq
        return self.f < other.f

def astar(grid, start, end):
    start_node = Node(None, start)
    end_node = Node(None, end)

    open_list = []
    closed_list = set()
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)

        if current_node == end_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]

        (x, y) = current_node.position
        neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]  # 4-directional movement

        for next_pos in neighbors:
            (nx, ny) = next_pos
            if nx < 0 or ny < 0 or nx >= len(grid) or ny >= len(grid[0]):
                continue
            if grid[nx][ny] != 0:
                continue
            if next_pos in closed_list:
                continue

            neighbor = Node(current_node, next_pos)
            neighbor.g = current_node.g + 1
            neighbor.h = abs(end_node.position[0] - nx) + abs(end_node.position[1] - ny)  # Manhattan distance
            neighbor.f = neighbor.g + neighbor.h

            if any(open_node for open_node in open_list if neighbor == open_node and neighbor.g > open_node.g):
                continue

            heapq.heappush(open_list, neighbor)

    return None  # No path found

# Example usage:
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0]
]

start = (0, 0)
end = (4, 4)

path = astar(grid, start, end)
print("Path found:" if path else "No path found")
print(path)
