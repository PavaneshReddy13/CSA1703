import math
from collections import Counter

# Sample dataset (Play Tennis example)
# Each row: [Outlook, Temperature, Humidity, Windy, PlayTennis]
data = [
    ['Sunny', 'Hot', 'High', False, 'No'],
    ['Sunny', 'Hot', 'High', True, 'No'],
    ['Overcast', 'Hot', 'High', False, 'Yes'],
    ['Rain', 'Mild', 'High', False, 'Yes'],
    ['Rain', 'Cool', 'Normal', False, 'Yes'],
    ['Rain', 'Cool', 'Normal', True, 'No'],
    ['Overcast', 'Cool', 'Normal', True, 'Yes'],
    ['Sunny', 'Mild', 'High', False, 'No'],
    ['Sunny', 'Cool', 'Normal', False, 'Yes'],
    ['Rain', 'Mild', 'Normal', False, 'Yes'],
    ['Sunny', 'Mild', 'Normal', True, 'Yes'],
    ['Overcast', 'Mild', 'High', True, 'Yes'],
    ['Overcast', 'Hot', 'Normal', False, 'Yes'],
    ['Rain', 'Mild', 'High', True, 'No']
]

# Features
features = ['Outlook', 'Temperature', 'Humidity', 'Windy']

# Gini Impurity
def gini(rows):
    counts = Counter(row[-1] for row in rows)
    impurity = 1
    for label in counts:
        prob = counts[label] / len(rows)
        impurity -= prob ** 2
    return impurity

# Split dataset
def split(rows, feature_idx, value):
    left, right = [], []
    for row in rows:
        if row[feature_idx] == value:
            left.append(row)
        else:
            right.append(row)
    return left, right

# Find the best split
def best_split(rows):
    best_gain = 0
    best_question = None
    current_uncertainty = gini(rows)
    n_features = len(rows[0]) - 1

    for col in range(n_features):
        values = set(row[col] for row in rows)
        for val in values:
            left, right = split(rows, col, val)
            if not left or not right:
                continue
            p = len(left) / len(rows)
            gain = current_uncertainty - p * gini(left) - (1 - p) * gini(right)
            if gain > best_gain:
                best_gain, best_question = gain, (col, val)
    return best_gain, best_question

# Leaf node
class Leaf:
    def __init__(self, rows):
        self.predictions = Counter(row[-1] for row in rows)

# Decision node
class DecisionNode:
    def __init__(self, question, true_branch, false_branch):
        self.question = question
        self.true_branch = true_branch
        self.false_branch = false_branch

# Build the tree recursively
print("192372103-pavanesh")
def build_tree(rows):
    gain, question = best_split(rows)
    if gain == 0:
        return Leaf(rows)
    true_rows, false_rows = split(rows, *question)
    true_branch = build_tree(true_rows)
    false_branch = build_tree(false_rows)
    return DecisionNode(question, true_branch, false_branch)

# Classify a new sample
def classify(row, node):
    if isinstance(node, Leaf):
        return node.predictions
    col, val = node.question
    if row[col] == val:
        return classify(row, node.true_branch)
    else:
        return classify(row, node.false_branch)

# Print the tree
def print_tree(node, spacing=""):
    if isinstance(node, Leaf):
        print(spacing + "Predict", dict(node.predictions))
        return
    col, val = node.question
    print(spacing + f"[{features[col]} == {val}]")
    print(spacing + '--> True:')
    print_tree(node.true_branch, spacing + "  ")
    print(spacing + '--> False:')
    print_tree(node.false_branch, spacing + "  ")

# Build and print
tree = build_tree(data)
print_tree(tree)

# Test prediction
test_data = ['Sunny', 'Cool', 'High', True]
prediction = classify(test_data, tree)
print("\nPrediction for", test_data, "=>", prediction)
